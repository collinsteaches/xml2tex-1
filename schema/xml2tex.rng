<?xml version="1.0" encoding="UTF-8"?>
<grammar 
  xmlns="http://relaxng.org/ns/structure/1.0"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
  xmlns:xml2tex="http://transpect.io/xml2tex"
  datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  
  <a:documentation>
    The xml2tex configuration file schema.
  </a:documentation>
  
  <include href="xslt2.rng"/>
  
  <start ns="http://transpect.io/xml2tex">
    <ref name="xml2tex.set"/>
  </start>
  
  <!--  *
        * elements
        * -->
  
  <define name="xml2tex.set">
    <element name="xml2tex:set">
      <ref name="xml2tex.set.attributes"/>
      <ref name="xml2tex.set.content"/>
    </element>
  </define>
  
  <define name="xml2tex.preamble">
    <element name="xml2tex:preamble">
      <zeroOrMore>
        <choice>
          <text />
          <ref name="xslt2.template.model"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  
  <define name="xml2tex.ns">
    <element name="xml2tex:ns">
      <ref name="xml2tex.ns.attributes"/>
      <ref name="xml2tex.content.empty"/>
    </element>
  </define>
  
  <define name="xml2tex.template">
    <element name="xml2tex:template">
      <ref name="xml2tex.template.attributes"/>
      <ref name="xml2tex.templatemodel.content"/>
    </element>
  </define>
  
  <define name="xml2tex.regex">
    <element name="xml2tex:regex">
      <ref name="xml2tex.regex.attributes"/>
      <ref name="xml2tex.templatemodel.content"/>
    </element>
  </define>
    
  <define name="xml2tex.charmap">
    <element name="xml2tex:charmap">
      <ref name="xml2tex.charmap.content"/>
    </element>
  </define>
  
  <define name="xml2tex.rule">
    <element name="xml2tex:rule">
      <ref name="xml2tex.rule.attributes"/>
      <ref name="xml2tex.rule.content"/>
    </element>
  </define>
  
  <define name="xml2tex.char">
    <element name="xml2tex:char">
      <ref name="xml2tex.char.attributes"/>
      <ref name="xml2tex.content.empty"/>
    </element>
  </define>
  
  <define name="xml2tex.text">
    <element name="xml2tex:text">
      <ref name="xml2tex.atom.attributes"/>
      <ref name="xml2tex.atom.content"/>      
    </element>
  </define>
  
  <define name="xml2tex.param">
    <element name="xml2tex:param">
      <ref name="xml2tex.atom.attributes"/>
      <ref name="xml2tex.atom.content"/>      
    </element>
  </define>
  
  <define name="xml2tex.option">
    <element name="xml2tex:option">
      <ref name="xml2tex.atom.attributes"/>
      <ref name="xml2tex.atom.content"/>      
    </element>
  </define>
  
  <!--  *
        * attributes
        * -->
  
  <define name="xml2tex.set.attributes">
    <optional>
      <attribute name="xml:base">
        <data type="anyURI"/>
      </attribute>
    </optional>
  </define>
  
  <define name="xml2tex.atom.attributes">
    <choice>
      <interleave>
        <optional>
          <attribute name="select">
            <text/>  
          </attribute>
        </optional>
        <optional>
          <attribute name="regex-group">
            <data type="integer"/>  
          </attribute>
        </optional>
      </interleave>
    </choice>
    
  </define>
  
  <define name="xml2tex.ns.attributes">
    <interleave>
      <attribute name="prefix">
        <data type="QName"/>
      </attribute>
      <attribute name="uri">
        <data type="anyURI"/>
      </attribute>      
    </interleave>
  </define>
  
  <define name="xml2tex.template.attributes">
    <interleave>
      <attribute name="context">
        <text/>
      </attribute>
      <optional>
        <attribute name="mathmode">
          <data type="boolean"/>
        </attribute>
      </optional>
    </interleave>
  </define>
  
  <define name="xml2tex.rule.attributes">
    <interleave>
      <choice>
        <interleave>
          <attribute name="name">
            <text/>
          </attribute>
          <attribute name="type">
            <choice>
              <value type="string">cmd</value>
              <value type="string">env</value>
            </choice>
          </attribute>                
        </interleave>
        <interleave>
          <empty/>
        </interleave>
      </choice>
      <optional>
        <attribute name="break-after">
          <data type="integer"/>
        </attribute>  
      </optional>
      <optional>
        <attribute name="break-before">
          <data type="integer"/>
        </attribute>  
      </optional>
    </interleave>
  </define>
  
  <define name="xml2tex.char.attributes">
    <interleave>
      <attribute name="character">
        <text/>
      </attribute>
      <attribute name="string">
        <text/>
      </attribute>
      <optional>
        <attribute name="context">
          <a:documentation>The content of this attribute is an XSLT 2 matching pattern that may contain QNames with 
            namespace prefixes. These prefixes must be declared in the generated stylesheet (the stylesheet that is 
            generated by ../xsl/xml2tex.xsl and that is stored in debug-dir/xml2tex/xml2tex01.conf2xsl.xsl). 
            Currently the prefixes css, dbk, and html map to their canonical namespace URIs. We may add more 
            namespace declarations for common vocabularies. As a fallback, you should be able to use a wildcard for 
            the prefix in most cases.
            Please be aware that mapping of symbols in MathML content is handled by a different module, 
            https://github.com/transpect/mml2tex, that comes with its own map. This conversion needs to be invoked
            separately before the xml2tex conversion.</a:documentation>
          <text/>
        </attribute>
      </optional>
    </interleave>
  </define>
  
  <define name="xml2tex.regex.attributes">
    <attribute name="regex">
      <text/>
    </attribute>
  </define>
  
  <!--  *
        * content models
        * -->
  
  <define name="xml2tex.set.content">
    <zeroOrMore>
      <group>
        <zeroOrMore>
          <ref name="xslt2.import.element"/>
        </zeroOrMore>
        <ref name="xslt2.top-level-elements.model"/>
      </group>
    </zeroOrMore>
    <interleave>
      <oneOrMore>
        <ref name="xml2tex.preamble"/>
      </oneOrMore>
      <zeroOrMore>
        <ref name="xml2tex.ns"/>  
      </zeroOrMore>
      <oneOrMore>
        <choice>
          <ref name="xml2tex.template"/>
          <ref name="xml2tex.regex"/>
        </choice>
      </oneOrMore>
      <optional>
        <ref name="xml2tex.charmap"/>  
      </optional>
    </interleave>
  </define>
  
  <define name="xml2tex.content.empty">
    <empty/>
  </define>
  
  <define name="xml2tex.templatemodel.content">
    <optional>
      <ref name="xml2tex.rule"/>
    </optional>
  </define>
  
  <define name="xml2tex.charmap.content">
    <oneOrMore>
      <ref name="xml2tex.char"/>
    </oneOrMore>
  </define>
  
  <define name="xml2tex.rule.content">
    <zeroOrMore>
      <choice>
        <ref name="xml2tex.text"/>
        <ref name="xml2tex.param"/>
        <ref name="xml2tex.option"/>
      </choice>
    </zeroOrMore>
  </define>
  
  <define name="xml2tex.atom.content">
    <oneOrMore>
      <text/>
    </oneOrMore>
    <zeroOrMore>
      <ref name="xslt2.template.model"/>
    </zeroOrMore>
  </define>
  
  <!--  *
        * schematron checks
        * -->
  
  <sch:ns xmlns:sch="http://purl.oclc.org/dsdl/schematron"
    prefix="xml2tex" uri="http://transpect.io/xml2tex"/>
  
  <sch:pattern 
    xmlns:sch="http://purl.oclc.org/dsdl/schematron">
    <sch:rule context="xml2tex:*[local-name() = ('option', 'param', 'text')]">
      <sch:let name="context" value="ancestor::xml2tex:template/@context"/>
      <sch:assert test="not(normalize-space(.) and @select)">
        It's not permitted to use inline text and both a @select expression. Please correct xml2tex:template[@context eq '<sch:value-of select="$context"/>'].
      </sch:assert>
    </sch:rule>
  </sch:pattern>
  
  <sch:pattern 
    xmlns:sch="http://purl.oclc.org/dsdl/schematron">
    <sch:rule context="@select">
      <sch:assert test="not(ancestor::xml2tex:regex)">                   
        The @regex-group attribute is not permitted, when the parent is &lt;xml2tex:template&gt;
      </sch:assert>
    </sch:rule>
  </sch:pattern>
  
  <sch:pattern 
    xmlns:sch="http://purl.oclc.org/dsdl/schematron">
    <sch:rule context="@regex-group">
      <sch:assert test="not(ancestor::xml2tex:template)">                   
        The @select attribute is not permitted, when the parent is &lt;xml2tex:regex&gt;
      </sch:assert>
    </sch:rule>
  </sch:pattern>
  
</grammar>